# This is a basic workflow to help you get started with Actions

name: CI
env:
  mascot: Mona
  MY_ENV_VAR: ${{ contains(github.ref_name, 'alpha')  && '[\"a\", \"b\"]' || '[\"a\", \"b\", \"c\"]' }}
  MY_ENV_VAR2: 'two single'
  MY_ENV_VAR3: 'three double'
  MY_ENV_VAR4: four none
  mine: ${{ contains(github.ref_name, 'alpha')  && '[\"dev\", \"qa\"]' || (contains(github.ref_name, 'beta')  &&  '[\"dev\", \"qa\", \"uat\"]' || '[\"dev\", \"qa\", \"uat\", \"prod\", \"demo\"]' ) }}

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request
  push:
    # branches: ["branch-1-0-x", "branch-1-1-x" ]
    branches: ["branch-1-0-x", "branch-1-1-x" ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 1.*.*
      - 2.*.*
      - 3.*.*
      - 4.*.*
      - 5.*.*
      - 6.*.*
      - 7.*.*
      - v*.*.*
#      - 1.0.*
#      - 1.1.*
  pull_request:
    branches: [ "main" ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'Build for environment'
        required: true
        default: 'dev'
      force:
        description: 'yes/no demo'
        required: false
        default: 'yes'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prepare_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          echo "matrix={\"env\": env.MY_ENV_VAR}"
          echo "matrix={\"env\": ${{ env.MY_ENV_VAR }}}"
          echo "matrix={\"env\": ${{ env.mine }}}"
          echo "manual input: ${{ github.event.inputs.environment }} ${{ github.event.inputs.force}}"
          echo "matrix={\"env\": ${{ env.mine }}}" >> $GITHUB_OUTPUT
          # echo "matrix={\"env\": ['aa','bb','cc']}" >> $GITHUB_OUTPUT
          echo "action_state3=blue" >> "$GITHUB_ENV"
          echo "action_state4=orange" >> "$GITHUB_ENV"   
        
 

  build:
    needs: prepare_matrix
    strategy:
      matrix: ${{ fromJSON(needs.prepare_matrix.outputs.matrix) }}

    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0

      # Runs a single command using the runners shell
      - name: Run a one-line script
        shell: bash
        run: echo Hello, world!!
      - name: set vars for later
        shell: bash
        run: |
          echo "BUILDDEV=true" >> "$GITHUB_ENV"
          if [[ $GITHUB_REF_TYPE == "tag" ]]; then
            if [[ $GITHUB_REF_NAME =~ [0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo not alpha or beta
              echo "BUILDQA=true" >> "$GITHUB_ENV"
              echo "BUILDUAT=true" >> "$GITHUB_ENV"
              echo "BUILDPROD=true" >> "$GITHUB_ENV"
              echo "BUILDDEMO=true" >> "$GITHUB_ENV"
            fi
            if [[ $GITHUB_REF_NAME =~ [0-9]+\.[0-9]+\.[0-9]+-beta\.[0-9]+$ ]]; then
              echo beta
              echo "BUILDQA=true" >> "$GITHUB_ENV"
              echo "BUILDUAT=true" >> "$GITHUB_ENV"
            fi
            if [[ $GITHUB_REF_NAME =~ [0-9]+\.[0-9]+\.[0-9]+-alpha\.[0-9]+$ ]]; then
              echo alpha
              echo "BUILDQA=true" >> "$GITHUB_ENV"
            fi
          else
            echo "not tagged"
          fi

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        shell: bash
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          cat README.md
          echo 'Hi ${{ env.mascot }}' 
          echo 'MY_ENV_VAR ${{ env.MY_ENV_VAR }}' 
          echo 'MY_ENV_VAR2 ${{ env.MY_ENV_VAR2 }}' 
          echo 'MY_ENV_VAR3 ${{ env.MY_ENV_VAR3 }}' 
          echo 'MY_ENV_VAR4 ${{ env.MY_ENV_VAR4 }}' 
          echo 'sha ${{ github.sha }}'
          echo 'ref ${{ github.ref }}'
          echo 'ref_name ${{ github.ref_name }}'
          echo 'ref_protected ${{ github.ref_protected }}'
          echo 'ref_type ${{ github.ref_type }}'
          echo 'env ${{ matrix.env }}'
          echo 'build dev? ${{ env.BUILDDEV }}'
          echo 'qa dev? ${{ env.BUILDQA }}'
          echo 'prod dev? ${{ env.BUILDPROD }}'
      - name: set more vars
        shell: bash
        run: |
          echo "action_state=yellow" >> "$GITHUB_ENV"
          echo "action_state2=green" >> "$GITHUB_ENV"   
          # cat envvars >> "$GITHUB_ENV" 
          git --version
          git log -n 3 --stat
          git log -n 3 --stat README.md
          git log -n 1 README.md 
          git log -n 1 HEAD README.md 
          git rev-list -n 1 HEAD 
          git rev-list -n 1 HEAD README.md 
          git rev-list -n 1 HEAD -- README.md 
          git rev-list -n 1 HEAD -- hello 
          git rev-list -n 1 HEAD -- .
          git rev-list -n 1 HEAD -- ./hello
          echo SOURCE_REV=$(git rev-list -n 1 HEAD -- hello)
          echo SOURCE_REV=$(git rev-list -n 1 HEAD -- hello) >> "$GITHUB_ENV"
      # Runs a set of commands using the runners shell
      - name: Run another multi-line script
        shell: bash
        run: |
          echo Now we have
          echo 'Hi ${{ env.mascot }}' 
          echo 'rev ${{ env.SOURCE_REV }}'
          echo 'MY_ENV_VAR ${{ env.MY_ENV_VAR }}' 
          echo 'MY_ENV_VAR2 ${{ env.MY_ENV_VAR2 }}' 
          echo 'MY_ENV_VAR3 ${{ env.MY_ENV_VAR3 }}' 
          echo 'MY_ENV_VAR4 ${{ env.MY_ENV_VAR4 }}' 
          echo 'env ${{ matrix.env }}'
          echo 'action_state ${{ env.action_state }}'
          echo 'action_state2 ${{ env.action_state2 }}'
          echo 'action_state3 ${{ env.action_state3 }}'
          echo 'action_state4 ${{ env.action_state4 }}'
          echo 'MY_FILE_VAR1 ${{ env.MY_FILE_VAR1 }}'
          echo 'MY_FILE_VAR2 ${{ env.MY_FILE_VAR2 }}'
          echo 'MY_FILE_VAR3 ${{ env.MY_FILE_VAR3 }}'
          echo 'MY_FILE_VAR4 ${{ env.MY_FILE_VAR4 }}'
          echo 'E ${{ env.E }}'
          # ./dump.sh
      - name: demo building switch
        shell: powershell
        run: |
          echo "BUILDDEV ${{ env.BUILDDEV }}"
          echo "BUILDQA ${{ env.BUILDQA }}"
          echo "BUILDUAT ${{ env.BUILDUAT }}"
          echo "BUILDPROD ${{ env.BUILDPROD }}"
          echo "BUILDDEMO ${{ env.BUILDDEMO }}"
          if ($BUILDDEV) {
            echo "building dev"
          } else {
            echo "not building dev"
          }

          if($BUILDQA) {
            echo "building qa"
          } else {
            echo "not building dev"
          }

          if($BUILDUAT) {
            echo "building uat"
          } else {
            echo "not building dev"
          }

          if($BUILDPROD) {
            echo "building prod"
          } else {
            echo "not building dev"
          }

          if($BUILDDEMO) {
            echo "building demo"
          } else {
            echo "not building dev"
          }

